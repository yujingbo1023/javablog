(window.webpackJsonp=window.webpackJsonp||[]).push([[171],{11974:function(a,t,s){"use strict";s.r(t);var r=s(2),_=Object(r.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h3",{attrs:{id:"_1-为什么需要链路追踪"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-为什么需要链路追踪"}},[a._v("#")]),a._v(" 1, 为什么需要链路追踪")]),a._v(" "),t("p",[t("img",{attrs:{src:"assets/1718637007078.png",alt:"1718637007078"}})]),a._v(" "),t("p",[a._v("在这个微服务系统中，用户通过浏览器的 H5页面访问系统，这个用户请求会先抵达微服务网关组件，然后网关再把请求分发给各个微服务。所以你会发现，用户请求从发起到结束要经历 很多个微服务的处理，这里面还涉及到消息组件的集成。")]),a._v(" "),t("p",[t("img",{attrs:{src:"assets/1718636969621.png",alt:"1718636969621"}})]),a._v(" "),t("p",[t("strong",[a._v("存在的问题")]),a._v("：")]),a._v(" "),t("ul",[t("li",[a._v("服务之间的依赖与被依赖的关系如何能够清晰的看到？")]),a._v(" "),t("li",[a._v("出现异常时如何能够快速定位到异常服务？")]),a._v(" "),t("li",[a._v("出现性能瓶颈时如何能够迅速定位哪个服务影响的？")])]),a._v(" "),t("p",[t("img",{attrs:{src:"assets/1718637043483.png",alt:"1718637043483"}})]),a._v(" "),t("p",[t("strong",[a._v("解决：")])]),a._v(" "),t("p",[a._v("为了能够在分布式架构中快速定位问题，分布式链路追踪应运而生。将一次分布式请求还原成调用链路，进行日志记录，性能监控并将一次分布式请求的调用情况集中展示。比如各个服务节点上的耗时、请求具体到达哪台机器上、每个服务节点的请求状态等等。")]),a._v(" "),t("p",[a._v("**常见链路追踪技术有那些：**市面上有很多链路追踪的项目，其中也不乏一些优秀的，如下：")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("Sleuth")]),a._v("：SpringCloud 提供的分布式系统中链路追踪解决方案。很可惜的是阿里系并没有链路追踪相关的开源项目，我们可以采用Spring Cloud Sleuth+Zipkin来做链路追踪的解决方案。")]),a._v(" "),t("li",[t("strong",[a._v("zipkin")]),a._v("：由Twitter公司开源，开放源代码分布式的跟踪系统，用于收集服务的定时数据，以解决微服务架构中的延迟问题，包括：数据的收集、存储、查找和展现。该产品结合"),t("code",[a._v("spring-cloud-sleuth")]),a._v("使用较为简单， 集成很方便， 但是功能较简单。")]),a._v(" "),t("li",[t("strong",[a._v("pinpoint")]),a._v("：韩国人开源的基于字节码注入的调用链分析，以及应用监控分析工具。特点是支持多种插件，UI功能强大，接入端无代码侵入")]),a._v(" "),t("li",[t("strong",[a._v("skywalking")]),a._v("：SkyWalking是本土开源的基于字节码注入的调用链分析，以及应用监控分析工具。特点是支持多种插件，UI功能较强，接入端无代码侵入。目前已加入Apache孵化器。")])]),a._v(" "),t("h3",{attrs:{id:"_2-spring-cloud-sleuth是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-spring-cloud-sleuth是什么"}},[a._v("#")]),a._v(" 2, Spring Cloud Sleuth是什么")]),a._v(" "),t("p",[a._v("Spring Cloud Sleuth实现了一种分布式的服务链路跟踪解决方案，通过使用Sleuth可以让我们快速定位某个服务的问题。简单来说，Sleuth相当于调用链监控工具的客户端，集成在各个微服务上，负责产生调用链监控数据。")]),a._v(" "),t("p",[t("strong",[a._v("注意：")])]),a._v(" "),t("p",[a._v("Spring Cloud Sleuth只负责产生监控数据，通过日志的方式展示出来，并没有提供可视化的UI界面。")]),a._v(" "),t("p",[t("strong",[a._v("Sleuth核心概念：")])]),a._v(" "),t("p",[t("img",{attrs:{src:"assets/1718637383237.png",alt:"1718637383237"}})]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("Span")]),a._v("：基本的工作单元，相当于链表中的一个节点，通过一个唯一ID标记它的开始、具体过程和结束。我们可以通过其中存储的开始和结束的时间戳来统计服务调用的耗时。除此之外还可以获取事件的名称、请求信息等。")]),a._v(" "),t("li",[t("strong",[a._v("Trace")]),a._v("：一系列的Span串联形成的一个树状结构，当请求到达系统的入口时就会创建一个唯一ID（traceId），唯一标识一条链路。这个traceId始终在服务之间传递，直到请求的返回，那么就可以使用这个traceId将整个请求串联起来，形成一条完整的链路。")])]),a._v(" "),t("p",[t("img",{attrs:{src:"assets/1718637480495.png",alt:"1718637480495"}})]),a._v(" "),t("p",[a._v("通过这些Sleuth 的特殊标记，我们就可以根据时间顺序，将一次服务请求经过的调用节点都梳理出来，这样你就能迅速发现报错信息发生在哪个阶段。这是使用Zipkin 生成的链路追踪的可视化信息。你可以看出，每个服务调用都以时间先后顺序规整好了，红色的部分就是发生线上Exception的服务。")]),a._v(" "),t("p",[t("img",{attrs:{src:"assets/1718637628138.png",alt:"1718637628138"}})]),a._v(" "),t("p",[a._v("除了Trace和Span之外，Sleuth还有一个特殊的数据结构，叫做Annotation，被用来记录一个具体的“事件”。我把 Sleuth所支持的四种事件做成了一个表格，你可以参考一下。")]),a._v(" "),t("p",[t("img",{attrs:{src:"assets/1718637669614.png",alt:"1718637669614"}})]),a._v(" "),t("p",[a._v("在这里我举个例子，来帮你理解怎么使用这四种事件。")]),a._v(" "),t("p",[t("img",{attrs:{src:"assets/1718637701711.png",alt:"1718637701711"}})]),a._v(" "),t("p",[a._v("如果你用服务B的ss减去 sr，你就可以得到请求在服务B阶段的处理时间。如果用服务B的sr减去服务A的cs，就可以得到服务A到服务B之间的网络调用延迟时间。如果用服务A的 cr减去 cs，就可以得到当次请求从发起到结束所花费的总时间。")]),a._v(" "),t("h3",{attrs:{id:"_3-微服务集成sleuth实现链路打标"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-微服务集成sleuth实现链路打标"}},[a._v("#")]),a._v(" 3, 微服务集成Sleuth实现链路打标")]),a._v(" "),t("h3",{attrs:{id:"_4-什么是zipkin"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-什么是zipkin"}},[a._v("#")]),a._v(" 4, 什么是ZipKin")]),a._v(" "),t("h3",{attrs:{id:"_5-docker搭建zipkin服务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-docker搭建zipkin服务"}},[a._v("#")]),a._v(" 5, Docker搭建Zipkin服务")]),a._v(" "),t("h3",{attrs:{id:"_6-zipkin客户端搭建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-zipkin客户端搭建"}},[a._v("#")]),a._v(" 6, Zipkin客户端搭建")]),a._v(" "),t("h3",{attrs:{id:"_7-什么是skywalking"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-什么是skywalking"}},[a._v("#")]),a._v(" 7, 什么是SkyWalking")]),a._v(" "),t("h3",{attrs:{id:"_8-skywalking核心概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-skywalking核心概念"}},[a._v("#")]),a._v(" 8, SkyWalking核心概念")]),a._v(" "),t("h3",{attrs:{id:"_9-什么是探针java-agent"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-什么是探针java-agent"}},[a._v("#")]),a._v(" 9, 什么是探针Java Agent")]),a._v(" "),t("h3",{attrs:{id:"_10-java探针日志监控实现之环境搭建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-java探针日志监控实现之环境搭建"}},[a._v("#")]),a._v(" 10, Java探针日志监控实现之环境搭建")]),a._v(" "),t("h3",{attrs:{id:"_11-java探针日志监控实现之探针实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11-java探针日志监控实现之探针实现"}},[a._v("#")]),a._v(" 11, Java探针日志监控实现之探针实现")]),a._v(" "),t("h3",{attrs:{id:"_12-skywalking服务环境搭建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_12-skywalking服务环境搭建"}},[a._v("#")]),a._v(" 12, SkyWalking服务环境搭建")]),a._v(" "),t("h3",{attrs:{id:"_13-微服务接入skywalking探针"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13-微服务接入skywalking探针"}},[a._v("#")]),a._v(" 13, 微服务接入SkyWalking探针")]),a._v(" "),t("h3",{attrs:{id:"_14-docker搭建elasticsearch环境"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_14-docker搭建elasticsearch环境"}},[a._v("#")]),a._v(" 14, Docker搭建Elasticsearch环境")]),a._v(" "),t("h3",{attrs:{id:"_15-skywalking使用elasticsearch持久化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_15-skywalking使用elasticsearch持久化"}},[a._v("#")]),a._v(" 15, SkyWalking使用Elasticsearch持久化")]),a._v(" "),t("h3",{attrs:{id:"_16-skywalking自定义链路追踪"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_16-skywalking自定义链路追踪"}},[a._v("#")]),a._v(" 16, SkyWalking自定义链路追踪")]),a._v(" "),t("h3",{attrs:{id:"_17-skywalking日志"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_17-skywalking日志"}},[a._v("#")]),a._v(" 17, SkyWalking日志")]),a._v(" "),t("h3",{attrs:{id:"_18-skywalking告警"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_18-skywalking告警"}},[a._v("#")]),a._v(" 18, SkyWalking告警")]),a._v(" "),t("h3",{attrs:{id:"_19-skywalking自定义告警规则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_19-skywalking自定义告警规则"}},[a._v("#")]),a._v(" 19, Skywalking自定义告警规则")]),a._v(" "),t("h3",{attrs:{id:"_20-skywalking网络钩子webhooks"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_20-skywalking网络钩子webhooks"}},[a._v("#")]),a._v(" 20, SkyWalking网络钩子Webhooks")]),a._v(" "),t("h3",{attrs:{id:"_21-skywalking钉钉告警"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_21-skywalking钉钉告警"}},[a._v("#")]),a._v(" 21, SkyWalking钉钉告警")]),a._v(" "),t("h3",{attrs:{id:"_22-skywalking邮件告警"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_22-skywalking邮件告警"}},[a._v("#")]),a._v(" 22, SkyWalking邮件告警")])])}),[],!1,null,null,null);t.default=_.exports}}]);